{"ast":null,"code":"import { act } from 'react-dom/test-utils';\nimport { LOAD_PRODUCTS, SET_LISTVIEW, SET_GRIDVIEW, UPDATE_SORT, SORT_PRODUCTS, UPDATE_FILTERS, FILTER_PRODUCTS, CLEAR_FILTERS } from '../actions';\n\nconst filter_reducer = (state, action) => {\n  if (action.type === LOAD_PRODUCTS) {\n    let maxPrice = action.payload.map(p => p.price);\n    maxPrice = Math.max(...maxPrice);\n    return { ...state,\n      all_products: [...action.payload],\n      filtered_products: [...action.payload],\n      filters: { ...state.filters,\n        max_price: maxPrice,\n        price: maxPrice\n      }\n    };\n  }\n\n  if (action.type === SET_GRIDVIEW) {\n    return { ...state,\n      grid_view: true\n    };\n  }\n\n  if (action.type === SET_LISTVIEW) {\n    return { ...state,\n      grid_view: false\n    };\n  }\n\n  if (action.type === UPDATE_SORT) {\n    return { ...state,\n      sort: action.payload\n    };\n  }\n\n  if (action.type === SORT_PRODUCTS) {\n    const {\n      sort,\n      filtered_products\n    } = state;\n    let tempProducts = [...filtered_products];\n\n    if (sort === 'price-lowest') {\n      tempProducts = tempProducts.sort((a, b) => {\n        if (a.price < b.price) {\n          return -1;\n        }\n\n        if (a.price > b.price) {\n          return 1;\n        }\n\n        return 0;\n      });\n    }\n\n    if (sort === 'price-highest') {\n      tempProducts = tempProducts.sort((a, b) => b.price - a.price);\n    }\n\n    if (sort === 'name-a') {\n      tempProducts = tempProducts.sort((a, b) => {\n        return a.name.localeCompare(b.name);\n      });\n    }\n\n    if (sort === 'name-z') {\n      tempProducts = tempProducts.sort((a, b) => {\n        return b.name.localeCompare(a.name);\n      });\n    }\n\n    return { ...state,\n      filtered_products: tempProducts\n    };\n  }\n\n  if (action.type === UPDATE_FILTERS) {\n    const {\n      name,\n      value\n    } = action.payload;\n    return { ...state,\n      filters: { ...state.filters,\n        [name]: value\n      }\n    };\n  }\n\n  if (action.type === FILTER_PRODUCTS) {\n    const {\n      all_products\n    } = state;\n    const {\n      text,\n      category,\n      company,\n      color,\n      price,\n      shipping\n    } = state.filters;\n    let tempProducts = [...all_products]; //filtering\n\n    if (text) {\n      tempProducts = tempProducts.filter(product => {\n        return product.name.toLowerCase().startsWith(text);\n      });\n    } //category\n\n\n    if (category !== 'all') {\n      tempProducts = tempProducts.filter(product => product.category === category);\n    } //company\n\n\n    if (company !== 'all') {\n      tempProducts = tempProducts.filter(product => product.company === company);\n    } //colors\n\n\n    if (color !== 'all') {\n      tempProducts = tempProducts.filter(product => {\n        return product.colors.find(c => c === color);\n      });\n    } // price\n\n\n    tempProducts = tempProducts.filter(product => product.price <= price); // shipping\n\n    if (shipping) {\n      tempProducts = tempProducts.filter(product => product.shipping === true);\n    }\n\n    return { ...state,\n      filtered_products: tempProducts\n    };\n  }\n\n  if (action.type === CLEAR_FILTERS) {\n    return { ...state,\n      filters: { ...state.filters,\n        text: '',\n        company: 'all',\n        category: 'all',\n        color: 'all',\n        price: state.filters.max_price,\n        shipping: false\n      }\n    };\n  }\n\n  throw new Error(`No Matching \"${action.type}\" - action type`);\n};\n\nexport default filter_reducer;","map":{"version":3,"sources":["C:/Julius/fullstack/react-lesson/testing/recepts/src/reducers/filter_reducer.js"],"names":["act","LOAD_PRODUCTS","SET_LISTVIEW","SET_GRIDVIEW","UPDATE_SORT","SORT_PRODUCTS","UPDATE_FILTERS","FILTER_PRODUCTS","CLEAR_FILTERS","filter_reducer","state","action","type","maxPrice","payload","map","p","price","Math","max","all_products","filtered_products","filters","max_price","grid_view","sort","tempProducts","a","b","name","localeCompare","value","text","category","company","color","shipping","filter","product","toLowerCase","startsWith","colors","find","c","Error"],"mappings":"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","sourcesContent":["import { act } from 'react-dom/test-utils'\nimport {\n  LOAD_PRODUCTS,\n  SET_LISTVIEW,\n  SET_GRIDVIEW,\n  UPDATE_SORT,\n  SORT_PRODUCTS,\n  UPDATE_FILTERS,\n  FILTER_PRODUCTS,\n  CLEAR_FILTERS,\n} from '../actions'\n\nconst filter_reducer = (state, action) => {\n  if(action.type === LOAD_PRODUCTS){\n    let maxPrice = action.payload.map((p)=> p.price)\n    maxPrice = Math.max(...maxPrice)\n    \n    return {\n      ...state,\n      all_products:[...action.payload],\n      filtered_products:[...action.payload],\n      filters:{...state.filters,max_price:maxPrice,price:maxPrice}\n    }\n  }\n  if(action.type === SET_GRIDVIEW){\n    return{...state,grid_view:true}\n  }\n  if(action.type === SET_LISTVIEW){\n    return{...state,grid_view:false}\n  }\n  if(action.type === UPDATE_SORT){\n    return {...state,sort: action.payload}\n  }\n  if(action.type === SORT_PRODUCTS){\n    const {sort, filtered_products} = state\n    let tempProducts = [...filtered_products]\n    if(sort === 'price-lowest'){\n      tempProducts = tempProducts.sort((a,b)=>{\n        if(a.price < b.price){\n          return -1\n        }\n        if(a.price > b.price){\n          return 1\n        } \n        return 0\n      })\n    } \n     if(sort === 'price-highest'){\n    tempProducts = tempProducts.sort((a,b)=>b.price - a.price)\n    }\n     if(sort === 'name-a'){\n      tempProducts = tempProducts.sort((a,b)=>{\n        return a.name.localeCompare(b.name)\n      })\n    }\n     if(sort === 'name-z'){\n    tempProducts = tempProducts.sort((a,b)=>{\n        return b.name.localeCompare(a.name)\n      })\n    }\n    return {...state,filtered_products:tempProducts}\n  }\n  if(action.type === UPDATE_FILTERS){\n    const {name,value} = action.payload\n    return {...state,filters:{...state.filters,[name]:value}}\n  }\n  if(action.type === FILTER_PRODUCTS){\n    const {all_products} = state\n    const {text,category,company,color,price,shipping}= state.filters\n\n\n    let tempProducts= [...all_products];\n    //filtering\n    if (text){\n      tempProducts = tempProducts.filter((product)=>{\n        return product.name.toLowerCase().startsWith(text)\n      })\n    }\n    //category\n    if(category !== 'all'){\n      tempProducts = tempProducts.filter(\n        (product)=> product.category === category\n      )  \n    }\n\n\n    //company\n    if(company !== 'all'){\n      tempProducts = tempProducts.filter(\n        (product)=> product.company === company\n      )  \n    }\n    //colors\n    if(color !== 'all'){\n      tempProducts = tempProducts.filter((product)=>{\n        return product.colors.find((c)=> c === color)\n      })\n    }\n// price\ntempProducts = tempProducts.filter((product) => product.\nprice <= price)\n// shipping\nif(shipping){\n  tempProducts = tempProducts.filter((product) => product.\n  shipping=== true)\n}\n    return {...state,filtered_products: tempProducts}\n  }\n  if(action.type === CLEAR_FILTERS){\n    return {\n      ...state,\n      filters:{\n        ...state.filters,\n        text:'',\n        company:'all',\n        category:'all',\n        color:'all',\n        price:state.filters.max_price,\n        shipping:false,\n      },\n    }\n  }\n  throw new Error(`No Matching \"${action.type}\" - action type`)\n}\n\nexport default filter_reducer\n"]},"metadata":{},"sourceType":"module"}